ARM GAS  /tmp/ccbvQrOK.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZL12MX_GPIO_Initv,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	_ZL12MX_GPIO_Initv:
  25              		.fnstart
  26              	.LFB1259:
  27              		.file 1 "Core/Src/main.cpp"
   1:Core/Src/main.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/main.cpp **** /**
   3:Core/Src/main.cpp ****   ******************************************************************************
   4:Core/Src/main.cpp ****   * @file           : main.c
   5:Core/Src/main.cpp ****   * @brief          : Main program body
   6:Core/Src/main.cpp ****   ******************************************************************************
   7:Core/Src/main.cpp ****   * @attention
   8:Core/Src/main.cpp ****   *
   9:Core/Src/main.cpp ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.cpp ****   * All rights reserved.
  11:Core/Src/main.cpp ****   *
  12:Core/Src/main.cpp ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.cpp ****   * in the root directory of this software component.
  14:Core/Src/main.cpp ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.cpp ****   *
  16:Core/Src/main.cpp ****   ******************************************************************************
  17:Core/Src/main.cpp ****   */
  18:Core/Src/main.cpp **** /* USER CODE END Header */
  19:Core/Src/main.cpp **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.cpp **** #include "main.h"
  21:Core/Src/main.cpp **** /* shouldn't we also include cmsis_os2.h? */
  22:Core/Src/main.cpp **** #include "cmsis_os.h"
  23:Core/Src/main.cpp **** 
  24:Core/Src/main.cpp **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.cpp **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.cpp **** #include "LED.h"
  27:Core/Src/main.cpp **** #include "motorControl.h"
  28:Core/Src/main.cpp **** /* USER CODE END Includes */
  29:Core/Src/main.cpp **** 
  30:Core/Src/main.cpp **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.cpp **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccbvQrOK.s 			page 2


  32:Core/Src/main.cpp **** 
  33:Core/Src/main.cpp **** /* USER CODE END PTD */
  34:Core/Src/main.cpp **** 
  35:Core/Src/main.cpp **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/main.cpp **** /* USER CODE BEGIN PD */
  37:Core/Src/main.cpp **** 
  38:Core/Src/main.cpp **** /* USER CODE END PD */
  39:Core/Src/main.cpp **** 
  40:Core/Src/main.cpp **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.cpp **** /* USER CODE BEGIN PM */
  42:Core/Src/main.cpp **** 
  43:Core/Src/main.cpp **** /* USER CODE END PM */
  44:Core/Src/main.cpp **** 
  45:Core/Src/main.cpp **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.cpp **** 
  47:Core/Src/main.cpp **** TIM_HandleTypeDef htim2;
  48:Core/Src/main.cpp **** 
  49:Core/Src/main.cpp **** 
  50:Core/Src/main.cpp **** /* Definitions for defaultTask */
  51:Core/Src/main.cpp **** osThreadId_t defaultTaskHandle;
  52:Core/Src/main.cpp **** const osThreadAttr_t defaultTask_attributes = {
  53:Core/Src/main.cpp ****   .name = "defaultTask",
  54:Core/Src/main.cpp ****   .stack_size = 128 * 4,
  55:Core/Src/main.cpp ****   .priority = (osPriority_t) osPriorityNormal,
  56:Core/Src/main.cpp **** };
  57:Core/Src/main.cpp **** 
  58:Core/Src/main.cpp **** /* Definitions for motorControlTask */
  59:Core/Src/main.cpp **** osThreadId_t motorControlTaskHandle;
  60:Core/Src/main.cpp **** // Is const needed?
  61:Core/Src/main.cpp **** const osThreadAttr_t motorControlTask_attributes = {
  62:Core/Src/main.cpp ****   .name = "motorControlTask",
  63:Core/Src/main.cpp ****   /* Not sure the stack size I should use, so I used same as
  64:Core/Src/main.cpp ****   default task */
  65:Core/Src/main.cpp ****   .stack_size = 128 * 4,
  66:Core/Src/main.cpp ****   /* Not sure which priority to set, so using the same as 
  67:Core/Src/main.cpp ****   default for now */
  68:Core/Src/main.cpp ****   .priority = (osPriority_t) osPriorityNormal,
  69:Core/Src/main.cpp **** };
  70:Core/Src/main.cpp **** 
  71:Core/Src/main.cpp **** /* USER CODE BEGIN PV */
  72:Core/Src/main.cpp **** 
  73:Core/Src/main.cpp **** /* USER CODE END PV */
  74:Core/Src/main.cpp **** 
  75:Core/Src/main.cpp **** /* Private function prototypes -----------------------------------------------*/
  76:Core/Src/main.cpp **** void SystemClock_Config(void);
  77:Core/Src/main.cpp **** static void MX_GPIO_Init(void);
  78:Core/Src/main.cpp **** static void MX_TIM2_Init(void);
  79:Core/Src/main.cpp **** void StartDefaultTask(void *argument);
  80:Core/Src/main.cpp **** 
  81:Core/Src/main.cpp **** /* USER CODE BEGIN PFP */
  82:Core/Src/main.cpp **** 
  83:Core/Src/main.cpp **** /* USER CODE END PFP */
  84:Core/Src/main.cpp **** 
  85:Core/Src/main.cpp **** /* Private user code ---------------------------------------------------------*/
  86:Core/Src/main.cpp **** /* USER CODE BEGIN 0 */
  87:Core/Src/main.cpp **** 
  88:Core/Src/main.cpp **** /* USER CODE END 0 */
ARM GAS  /tmp/ccbvQrOK.s 			page 3


  89:Core/Src/main.cpp **** 
  90:Core/Src/main.cpp **** /**
  91:Core/Src/main.cpp ****   * @brief  The application entry point.
  92:Core/Src/main.cpp ****   * @retval int
  93:Core/Src/main.cpp ****   */
  94:Core/Src/main.cpp **** int main(void)
  95:Core/Src/main.cpp **** {
  96:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
  97:Core/Src/main.cpp **** 
  98:Core/Src/main.cpp ****   /* LED objects */
  99:Core/Src/main.cpp ****   STM32LED::LED1= new STM32LED::LED(GPIOB, GPIO_PIN_0);
 100:Core/Src/main.cpp ****   STM32LED::LED2= new STM32LED::LED(GPIOE, GPIO_PIN_1);
 101:Core/Src/main.cpp ****   STM32LED::LED3= new STM32LED::LED(GPIOB, GPIO_PIN_14);
 102:Core/Src/main.cpp **** 
 103:Core/Src/main.cpp ****   /* motorControl object(s) */
 104:Core/Src/main.cpp ****   STM32_motorControl::motorC1 = new STM32_motorControl::motorControl(GPIOA , GPIO_PIN_0 , &htim2);
 105:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> calculate_timer_frequency(100);
 106:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> adjust_timer_frequency(1000);
 107:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> timer_start();
 108:Core/Src/main.cpp ****   /* USER CODE END 1 */
 109:Core/Src/main.cpp **** 
 110:Core/Src/main.cpp ****   /* MCU Configuration--------------------------------------------------------*/
 111:Core/Src/main.cpp **** 
 112:Core/Src/main.cpp ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 113:Core/Src/main.cpp ****   HAL_Init();
 114:Core/Src/main.cpp **** 
 115:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
 116:Core/Src/main.cpp **** 
 117:Core/Src/main.cpp ****   /* USER CODE END Init */
 118:Core/Src/main.cpp **** 
 119:Core/Src/main.cpp ****   /* Configure the system clock */
 120:Core/Src/main.cpp ****   SystemClock_Config();
 121:Core/Src/main.cpp **** 
 122:Core/Src/main.cpp ****   /* USER CODE BEGIN SysInit */
 123:Core/Src/main.cpp **** 
 124:Core/Src/main.cpp ****   /* USER CODE END SysInit */
 125:Core/Src/main.cpp **** 
 126:Core/Src/main.cpp ****   /* Initialize all configured peripherals */
 127:Core/Src/main.cpp ****   MX_GPIO_Init();
 128:Core/Src/main.cpp ****   MX_TIM2_Init();
 129:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 130:Core/Src/main.cpp ****   HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 131:Core/Src/main.cpp ****   /* USER CODE END 2 */
 132:Core/Src/main.cpp **** 
 133:Core/Src/main.cpp ****   /* Init scheduler */
 134:Core/Src/main.cpp ****   osKernelInitialize();
 135:Core/Src/main.cpp **** 
 136:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_MUTEX */
 137:Core/Src/main.cpp ****   /* add mutexes, ... */
 138:Core/Src/main.cpp ****   /* USER CODE END RTOS_MUTEX */
 139:Core/Src/main.cpp **** 
 140:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 141:Core/Src/main.cpp ****   /* add semaphores, ... */
 142:Core/Src/main.cpp ****   /* USER CODE END RTOS_SEMAPHORES */
 143:Core/Src/main.cpp **** 
 144:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_TIMERS */
 145:Core/Src/main.cpp ****   /* start timers, add new ones, ... */
ARM GAS  /tmp/ccbvQrOK.s 			page 4


 146:Core/Src/main.cpp ****   /* USER CODE END RTOS_TIMERS */
 147:Core/Src/main.cpp **** 
 148:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_QUEUES */
 149:Core/Src/main.cpp ****   /* add queues, ... */
 150:Core/Src/main.cpp ****   /* USER CODE END RTOS_QUEUES */
 151:Core/Src/main.cpp **** 
 152:Core/Src/main.cpp ****   /* Create the thread(s) */
 153:Core/Src/main.cpp ****   /* creation of defaultTask */
 154:Core/Src/main.cpp ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 155:Core/Src/main.cpp ****   // motorControlTaskHandle = osThreadNew(, NULL, &motorControlTask_attributes);
 156:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_THREADS */
 157:Core/Src/main.cpp ****   /* add threads, ... */
 158:Core/Src/main.cpp ****   /* USER CODE END RTOS_THREADS */
 159:Core/Src/main.cpp **** 
 160:Core/Src/main.cpp ****   /* USER CODE BEGIN RTOS_EVENTS */
 161:Core/Src/main.cpp ****   /* add events, ... */
 162:Core/Src/main.cpp ****   /* USER CODE END RTOS_EVENTS */
 163:Core/Src/main.cpp **** 
 164:Core/Src/main.cpp ****   /* Start scheduler */
 165:Core/Src/main.cpp ****   osKernelStart();
 166:Core/Src/main.cpp ****   /* We should never get here as control is now taken by the scheduler */
 167:Core/Src/main.cpp ****   /* Infinite loop */
 168:Core/Src/main.cpp ****   /* USER CODE BEGIN WHILE */
 169:Core/Src/main.cpp ****   while (1)
 170:Core/Src/main.cpp ****   {
 171:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 172:Core/Src/main.cpp **** 
 173:Core/Src/main.cpp ****     /* USER CODE BEGIN 3 */
 174:Core/Src/main.cpp ****   }
 175:Core/Src/main.cpp ****   /* USER CODE END 3 */
 176:Core/Src/main.cpp **** }
 177:Core/Src/main.cpp **** 
 178:Core/Src/main.cpp **** /**
 179:Core/Src/main.cpp ****   * @brief System Clock Configuration
 180:Core/Src/main.cpp ****   * @retval None
 181:Core/Src/main.cpp ****   */
 182:Core/Src/main.cpp **** void SystemClock_Config(void)
 183:Core/Src/main.cpp **** {
 184:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 185:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 186:Core/Src/main.cpp **** 
 187:Core/Src/main.cpp ****   /** Supply configuration update enable
 188:Core/Src/main.cpp ****   */
 189:Core/Src/main.cpp ****   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 190:Core/Src/main.cpp **** 
 191:Core/Src/main.cpp ****   /** Configure the main internal regulator output voltage
 192:Core/Src/main.cpp ****   */
 193:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 194:Core/Src/main.cpp **** 
 195:Core/Src/main.cpp ****   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 196:Core/Src/main.cpp **** 
 197:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 198:Core/Src/main.cpp ****   * in the RCC_OscInitTypeDef structure.
 199:Core/Src/main.cpp ****   */
 200:Core/Src/main.cpp ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 201:Core/Src/main.cpp ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 202:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccbvQrOK.s 			page 5


 203:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 204:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
 205:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 256;
 206:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = 2;
 207:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 208:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLR = 2;
 209:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 210:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 211:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 212:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 213:Core/Src/main.cpp ****   {
 214:Core/Src/main.cpp ****     Error_Handler();
 215:Core/Src/main.cpp ****   }
 216:Core/Src/main.cpp **** 
 217:Core/Src/main.cpp ****   /** Initializes the CPU, AHB and APB buses clocks
 218:Core/Src/main.cpp ****   */
 219:Core/Src/main.cpp ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 220:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 221:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
 222:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 223:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 224:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 225:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 226:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 227:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 228:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 229:Core/Src/main.cpp **** 
 230:Core/Src/main.cpp ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 231:Core/Src/main.cpp ****   {
 232:Core/Src/main.cpp ****     Error_Handler();
 233:Core/Src/main.cpp ****   }
 234:Core/Src/main.cpp **** }
 235:Core/Src/main.cpp **** 
 236:Core/Src/main.cpp **** /**
 237:Core/Src/main.cpp ****   * @brief TIM2 Initialization Function
 238:Core/Src/main.cpp ****   * @param None
 239:Core/Src/main.cpp ****   * @retval None
 240:Core/Src/main.cpp ****   */
 241:Core/Src/main.cpp **** static void MX_TIM2_Init(void)
 242:Core/Src/main.cpp **** {
 243:Core/Src/main.cpp **** 
 244:Core/Src/main.cpp ****   /* USER CODE BEGIN TIM2_Init 0 */
 245:Core/Src/main.cpp **** 
 246:Core/Src/main.cpp ****   /* USER CODE END TIM2_Init 0 */
 247:Core/Src/main.cpp **** 
 248:Core/Src/main.cpp ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 249:Core/Src/main.cpp ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 250:Core/Src/main.cpp ****   TIM_OC_InitTypeDef sConfigOC = {0};
 251:Core/Src/main.cpp **** 
 252:Core/Src/main.cpp ****   /* USER CODE BEGIN TIM2_Init 1 */
 253:Core/Src/main.cpp **** 
 254:Core/Src/main.cpp ****   /* USER CODE END TIM2_Init 1 */
 255:Core/Src/main.cpp ****   htim2.Instance = TIM2;
 256:Core/Src/main.cpp ****   htim2.Init.Prescaler = 400;
 257:Core/Src/main.cpp ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 258:Core/Src/main.cpp ****   htim2.Init.Period = 1000;
 259:Core/Src/main.cpp ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccbvQrOK.s 			page 6


 260:Core/Src/main.cpp ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 261:Core/Src/main.cpp ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 262:Core/Src/main.cpp ****   {
 263:Core/Src/main.cpp ****     Error_Handler();
 264:Core/Src/main.cpp ****   }
 265:Core/Src/main.cpp ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 266:Core/Src/main.cpp ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 267:Core/Src/main.cpp ****   {
 268:Core/Src/main.cpp ****     Error_Handler();
 269:Core/Src/main.cpp ****   }
 270:Core/Src/main.cpp ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 271:Core/Src/main.cpp ****   {
 272:Core/Src/main.cpp ****     Error_Handler();
 273:Core/Src/main.cpp ****   }
 274:Core/Src/main.cpp ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 275:Core/Src/main.cpp ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 276:Core/Src/main.cpp ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 277:Core/Src/main.cpp ****   {
 278:Core/Src/main.cpp ****     Error_Handler();
 279:Core/Src/main.cpp ****   }
 280:Core/Src/main.cpp ****   sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 281:Core/Src/main.cpp ****   sConfigOC.Pulse = 0;
 282:Core/Src/main.cpp ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 283:Core/Src/main.cpp ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 284:Core/Src/main.cpp ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 285:Core/Src/main.cpp ****   {
 286:Core/Src/main.cpp ****     Error_Handler();
 287:Core/Src/main.cpp ****   }
 288:Core/Src/main.cpp ****   /* USER CODE BEGIN TIM2_Init 2 */
 289:Core/Src/main.cpp **** 
 290:Core/Src/main.cpp ****   /* USER CODE END TIM2_Init 2 */
 291:Core/Src/main.cpp ****   HAL_TIM_MspPostInit(&htim2);
 292:Core/Src/main.cpp **** 
 293:Core/Src/main.cpp **** }
 294:Core/Src/main.cpp **** 
 295:Core/Src/main.cpp **** /**
 296:Core/Src/main.cpp ****   * @brief GPIO Initialization Function
 297:Core/Src/main.cpp ****   * @param None
 298:Core/Src/main.cpp ****   * @retval None
 299:Core/Src/main.cpp ****   */
 300:Core/Src/main.cpp **** static void MX_GPIO_Init(void)
 301:Core/Src/main.cpp **** {
  28              		.loc 1 301 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.save {r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41              		.pad #44
  42 0002 8BB0     		sub	sp, sp, #44
ARM GAS  /tmp/ccbvQrOK.s 			page 7


  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 64
 302:Core/Src/main.cpp ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  45              		.loc 1 302 3 view .LVU1
  46              		.loc 1 302 20 is_stmt 0 view .LVU2
  47 0004 0024     		movs	r4, #0
  48 0006 0594     		str	r4, [sp, #20]
  49 0008 0694     		str	r4, [sp, #24]
  50 000a 0794     		str	r4, [sp, #28]
  51 000c 0894     		str	r4, [sp, #32]
  52 000e 0994     		str	r4, [sp, #36]
 303:Core/Src/main.cpp **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 304:Core/Src/main.cpp **** /* USER CODE END MX_GPIO_Init_1 */
 305:Core/Src/main.cpp **** 
 306:Core/Src/main.cpp ****   /* GPIO Ports Clock Enable */
 307:Core/Src/main.cpp ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  53              		.loc 1 307 3 is_stmt 1 view .LVU3
  54              	.LBB4:
  55              		.loc 1 307 3 view .LVU4
  56              		.loc 1 307 3 view .LVU5
  57 0010 2F4B     		ldr	r3, .L3
  58 0012 D3F8E020 		ldr	r2, [r3, #224]
  59 0016 42F00402 		orr	r2, r2, #4
  60 001a C3F8E020 		str	r2, [r3, #224]
  61              		.loc 1 307 3 view .LVU6
  62 001e D3F8E020 		ldr	r2, [r3, #224]
  63 0022 02F00402 		and	r2, r2, #4
  64 0026 0092     		str	r2, [sp]
  65              		.loc 1 307 3 view .LVU7
  66 0028 009A     		ldr	r2, [sp]
  67              	.LBE4:
 308:Core/Src/main.cpp ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  68              		.loc 1 308 3 view .LVU8
  69              	.LBB5:
  70              		.loc 1 308 3 view .LVU9
  71              		.loc 1 308 3 view .LVU10
  72 002a D3F8E020 		ldr	r2, [r3, #224]
  73 002e 42F08002 		orr	r2, r2, #128
  74 0032 C3F8E020 		str	r2, [r3, #224]
  75              		.loc 1 308 3 view .LVU11
  76 0036 D3F8E020 		ldr	r2, [r3, #224]
  77 003a 02F08002 		and	r2, r2, #128
  78 003e 0192     		str	r2, [sp, #4]
  79              		.loc 1 308 3 view .LVU12
  80 0040 019A     		ldr	r2, [sp, #4]
  81              	.LBE5:
 309:Core/Src/main.cpp ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 309 3 view .LVU13
  83              	.LBB6:
  84              		.loc 1 309 3 view .LVU14
  85              		.loc 1 309 3 view .LVU15
  86 0042 D3F8E020 		ldr	r2, [r3, #224]
  87 0046 42F00102 		orr	r2, r2, #1
  88 004a C3F8E020 		str	r2, [r3, #224]
  89              		.loc 1 309 3 view .LVU16
  90 004e D3F8E020 		ldr	r2, [r3, #224]
  91 0052 02F00102 		and	r2, r2, #1
ARM GAS  /tmp/ccbvQrOK.s 			page 8


  92 0056 0292     		str	r2, [sp, #8]
  93              		.loc 1 309 3 view .LVU17
  94 0058 029A     		ldr	r2, [sp, #8]
  95              	.LBE6:
 310:Core/Src/main.cpp ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 310 3 view .LVU18
  97              	.LBB7:
  98              		.loc 1 310 3 view .LVU19
  99              		.loc 1 310 3 view .LVU20
 100 005a D3F8E020 		ldr	r2, [r3, #224]
 101 005e 42F00202 		orr	r2, r2, #2
 102 0062 C3F8E020 		str	r2, [r3, #224]
 103              		.loc 1 310 3 view .LVU21
 104 0066 D3F8E020 		ldr	r2, [r3, #224]
 105 006a 02F00202 		and	r2, r2, #2
 106 006e 0392     		str	r2, [sp, #12]
 107              		.loc 1 310 3 view .LVU22
 108 0070 039A     		ldr	r2, [sp, #12]
 109              	.LBE7:
 311:Core/Src/main.cpp ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 110              		.loc 1 311 3 view .LVU23
 111              	.LBB8:
 112              		.loc 1 311 3 view .LVU24
 113              		.loc 1 311 3 view .LVU25
 114 0072 D3F8E020 		ldr	r2, [r3, #224]
 115 0076 42F01002 		orr	r2, r2, #16
 116 007a C3F8E020 		str	r2, [r3, #224]
 117              		.loc 1 311 3 view .LVU26
 118 007e D3F8E030 		ldr	r3, [r3, #224]
 119 0082 03F01003 		and	r3, r3, #16
 120 0086 0493     		str	r3, [sp, #16]
 121              		.loc 1 311 3 view .LVU27
 122 0088 049B     		ldr	r3, [sp, #16]
 123              	.LBE8:
 312:Core/Src/main.cpp **** 
 313:Core/Src/main.cpp ****   /*Configure GPIO pin Output Level */
 314:Core/Src/main.cpp ****   HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 124              		.loc 1 314 3 view .LVU28
 125              		.loc 1 314 20 is_stmt 0 view .LVU29
 126 008a 124F     		ldr	r7, .L3+4
 127 008c 2246     		mov	r2, r4
 128 008e 44F20101 		movw	r1, #16385
 129 0092 3846     		mov	r0, r7
 130 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 131              	.LVL0:
 315:Core/Src/main.cpp **** 
 316:Core/Src/main.cpp ****   /*Configure GPIO pin Output Level */
 317:Core/Src/main.cpp ****   HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 132              		.loc 1 317 3 is_stmt 1 view .LVU30
 133              		.loc 1 317 20 is_stmt 0 view .LVU31
 134 0098 0F4D     		ldr	r5, .L3+8
 135 009a 2246     		mov	r2, r4
 136 009c 0221     		movs	r1, #2
 137 009e 2846     		mov	r0, r5
 138 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 139              	.LVL1:
 318:Core/Src/main.cpp **** 
ARM GAS  /tmp/ccbvQrOK.s 			page 9


 319:Core/Src/main.cpp ****   /*Configure GPIO pins : LED1_Pin LED3_Pin */
 320:Core/Src/main.cpp ****   GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin;
 140              		.loc 1 320 3 is_stmt 1 view .LVU32
 141              		.loc 1 320 23 is_stmt 0 view .LVU33
 142 00a4 44F20103 		movw	r3, #16385
 143 00a8 0593     		str	r3, [sp, #20]
 321:Core/Src/main.cpp ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 144              		.loc 1 321 3 is_stmt 1 view .LVU34
 145              		.loc 1 321 24 is_stmt 0 view .LVU35
 146 00aa 0126     		movs	r6, #1
 147 00ac 0696     		str	r6, [sp, #24]
 322:Core/Src/main.cpp ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 322 3 is_stmt 1 view .LVU36
 149              		.loc 1 322 24 is_stmt 0 view .LVU37
 150 00ae 0794     		str	r4, [sp, #28]
 323:Core/Src/main.cpp ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 151              		.loc 1 323 3 is_stmt 1 view .LVU38
 152              		.loc 1 323 25 is_stmt 0 view .LVU39
 153 00b0 0894     		str	r4, [sp, #32]
 324:Core/Src/main.cpp ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 154              		.loc 1 324 3 is_stmt 1 view .LVU40
 155              		.loc 1 324 16 is_stmt 0 view .LVU41
 156 00b2 05A9     		add	r1, sp, #20
 157 00b4 3846     		mov	r0, r7
 158 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 159              	.LVL2:
 325:Core/Src/main.cpp **** 
 326:Core/Src/main.cpp ****   /*Configure GPIO pin : LED2_Pin */
 327:Core/Src/main.cpp ****   GPIO_InitStruct.Pin = LED2_Pin;
 160              		.loc 1 327 3 is_stmt 1 view .LVU42
 161              		.loc 1 327 23 is_stmt 0 view .LVU43
 162 00ba 0223     		movs	r3, #2
 163 00bc 0593     		str	r3, [sp, #20]
 328:Core/Src/main.cpp ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 164              		.loc 1 328 3 is_stmt 1 view .LVU44
 165              		.loc 1 328 24 is_stmt 0 view .LVU45
 166 00be 0696     		str	r6, [sp, #24]
 329:Core/Src/main.cpp ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 167              		.loc 1 329 3 is_stmt 1 view .LVU46
 168              		.loc 1 329 24 is_stmt 0 view .LVU47
 169 00c0 0794     		str	r4, [sp, #28]
 330:Core/Src/main.cpp ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 170              		.loc 1 330 3 is_stmt 1 view .LVU48
 171              		.loc 1 330 25 is_stmt 0 view .LVU49
 172 00c2 0894     		str	r4, [sp, #32]
 331:Core/Src/main.cpp ****   HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 173              		.loc 1 331 3 is_stmt 1 view .LVU50
 174              		.loc 1 331 16 is_stmt 0 view .LVU51
 175 00c4 05A9     		add	r1, sp, #20
 176 00c6 2846     		mov	r0, r5
 177 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 178              	.LVL3:
 332:Core/Src/main.cpp **** 
 333:Core/Src/main.cpp **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 334:Core/Src/main.cpp **** /* USER CODE END MX_GPIO_Init_2 */
 335:Core/Src/main.cpp **** }
 179              		.loc 1 335 1 view .LVU52
ARM GAS  /tmp/ccbvQrOK.s 			page 10


 180 00cc 0BB0     		add	sp, sp, #44
 181              	.LCFI2:
 182              		.cfi_def_cfa_offset 20
 183              		@ sp needed
 184 00ce F0BD     		pop	{r4, r5, r6, r7, pc}
 185              	.L4:
 186              		.align	2
 187              	.L3:
 188 00d0 00440258 		.word	1476543488
 189 00d4 00040258 		.word	1476527104
 190 00d8 00100258 		.word	1476530176
 191              		.cfi_endproc
 192              	.LFE1259:
 193              		.fnend
 195              		.section	.text._Z16StartDefaultTaskPv,"ax",%progbits
 196              		.align	1
 197              		.global	_Z16StartDefaultTaskPv
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv5-d16
 203              	_Z16StartDefaultTaskPv:
 204              		.fnstart
 205              	.LFB1260:
 336:Core/Src/main.cpp **** 
 337:Core/Src/main.cpp **** /* USER CODE BEGIN 4 */
 338:Core/Src/main.cpp **** 
 339:Core/Src/main.cpp **** /* USER CODE END 4 */
 340:Core/Src/main.cpp **** 
 341:Core/Src/main.cpp **** /* USER CODE BEGIN Header_StartDefaultTask */
 342:Core/Src/main.cpp **** /**
 343:Core/Src/main.cpp ****   * @brief  Function implementing the defaultTask thread.
 344:Core/Src/main.cpp ****   * @param  argument: Not used
 345:Core/Src/main.cpp ****   * @retval None
 346:Core/Src/main.cpp ****   */
 347:Core/Src/main.cpp **** /* USER CODE END Header_StartDefaultTask */
 348:Core/Src/main.cpp **** void StartDefaultTask(void *argument)
 349:Core/Src/main.cpp **** {
 206              		.loc 1 349 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL4:
 211              		.loc 1 349 1 is_stmt 0 view .LVU54
 212 0000 10B5     		push	{r4, lr}
 213              		.save {r4, lr}
 214              	.LCFI3:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 4, -8
 217              		.cfi_offset 14, -4
 218              	.LVL5:
 219              	.L6:
 350:Core/Src/main.cpp ****   /* USER CODE BEGIN 5 */
 351:Core/Src/main.cpp ****   /* Infinite loop */
 352:Core/Src/main.cpp ****   for(;;)
 220              		.loc 1 352 3 is_stmt 1 discriminator 1 view .LVU55
 353:Core/Src/main.cpp ****   {
ARM GAS  /tmp/ccbvQrOK.s 			page 11


 354:Core/Src/main.cpp ****     STM32LED:: LED1 -> toggle();
 221              		.loc 1 354 5 discriminator 1 view .LVU56
 222              		.loc 1 354 30 is_stmt 0 discriminator 1 view .LVU57
 223 0002 104B     		ldr	r3, .L8
 224 0004 1868     		ldr	r0, [r3]
 225 0006 FFF7FEFF 		bl	_ZN8STM32LED3LED6toggleEv
 226              	.LVL6:
 355:Core/Src/main.cpp ****     osDelay(5);
 227              		.loc 1 355 5 is_stmt 1 discriminator 1 view .LVU58
 228              		.loc 1 355 12 is_stmt 0 discriminator 1 view .LVU59
 229 000a 0520     		movs	r0, #5
 230 000c FFF7FEFF 		bl	osDelay
 231              	.LVL7:
 356:Core/Src/main.cpp ****     __HAL_TIM_SET_AUTORELOAD(&htim2, 1);
 232              		.loc 1 356 5 is_stmt 1 discriminator 1 view .LVU60
 233              		.loc 1 356 5 discriminator 1 view .LVU61
 234 0010 0D4C     		ldr	r4, .L8+4
 235 0012 2268     		ldr	r2, [r4]
 236 0014 0123     		movs	r3, #1
 237 0016 D362     		str	r3, [r2, #44]
 238              		.loc 1 356 5 discriminator 1 view .LVU62
 239 0018 E360     		str	r3, [r4, #12]
 357:Core/Src/main.cpp ****     STM32LED:: LED2 -> toggle();
 240              		.loc 1 357 5 discriminator 1 view .LVU63
 241              		.loc 1 357 30 is_stmt 0 discriminator 1 view .LVU64
 242 001a 0C4B     		ldr	r3, .L8+8
 243 001c 1868     		ldr	r0, [r3]
 244 001e FFF7FEFF 		bl	_ZN8STM32LED3LED6toggleEv
 245              	.LVL8:
 358:Core/Src/main.cpp ****     osDelay(5);
 246              		.loc 1 358 5 is_stmt 1 discriminator 1 view .LVU65
 247              		.loc 1 358 12 is_stmt 0 discriminator 1 view .LVU66
 248 0022 0520     		movs	r0, #5
 249 0024 FFF7FEFF 		bl	osDelay
 250              	.LVL9:
 359:Core/Src/main.cpp ****     STM32LED:: LED3 -> toggle();
 251              		.loc 1 359 5 is_stmt 1 discriminator 1 view .LVU67
 252              		.loc 1 359 30 is_stmt 0 discriminator 1 view .LVU68
 253 0028 094B     		ldr	r3, .L8+12
 254 002a 1868     		ldr	r0, [r3]
 255 002c FFF7FEFF 		bl	_ZN8STM32LED3LED6toggleEv
 256              	.LVL10:
 360:Core/Src/main.cpp ****     __HAL_TIM_SET_AUTORELOAD(&htim2, 1000);
 257              		.loc 1 360 5 is_stmt 1 discriminator 1 view .LVU69
 258              		.loc 1 360 5 discriminator 1 view .LVU70
 259 0030 2268     		ldr	r2, [r4]
 260 0032 4FF47A73 		mov	r3, #1000
 261 0036 D362     		str	r3, [r2, #44]
 262              		.loc 1 360 5 discriminator 1 view .LVU71
 263 0038 E360     		str	r3, [r4, #12]
 361:Core/Src/main.cpp ****     osDelay(5);
 264              		.loc 1 361 5 discriminator 1 view .LVU72
 265              		.loc 1 361 12 is_stmt 0 discriminator 1 view .LVU73
 266 003a 0520     		movs	r0, #5
 267 003c FFF7FEFF 		bl	osDelay
 268              	.LVL11:
 352:Core/Src/main.cpp ****   {
ARM GAS  /tmp/ccbvQrOK.s 			page 12


 269              		.loc 1 352 3 is_stmt 1 discriminator 1 view .LVU74
 270 0040 DFE7     		b	.L6
 271              	.L9:
 272 0042 00BF     		.align	2
 273              	.L8:
 274 0044 00000000 		.word	_ZN8STM32LED4LED1E
 275 0048 00000000 		.word	.LANCHOR0
 276 004c 00000000 		.word	_ZN8STM32LED4LED2E
 277 0050 00000000 		.word	_ZN8STM32LED4LED3E
 278              		.cfi_endproc
 279              	.LFE1260:
 280              		.fnend
 282              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 283              		.align	1
 284              		.global	HAL_TIM_PeriodElapsedCallback
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv5-d16
 290              	HAL_TIM_PeriodElapsedCallback:
 291              		.fnstart
 292              	.LVL12:
 293              	.LFB1261:
 362:Core/Src/main.cpp ****   }
 363:Core/Src/main.cpp ****   /* USER CODE END 5 */
 364:Core/Src/main.cpp **** }
 365:Core/Src/main.cpp **** 
 366:Core/Src/main.cpp **** 
 367:Core/Src/main.cpp **** /**
 368:Core/Src/main.cpp ****   * @brief  Period elapsed callback in non blocking mode
 369:Core/Src/main.cpp ****   * @note   This function is called  when TIM1 interrupt took place, inside
 370:Core/Src/main.cpp ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 371:Core/Src/main.cpp ****   * a global variable "uwTick" used as application time base.
 372:Core/Src/main.cpp ****   * @param  htim : TIM handle
 373:Core/Src/main.cpp ****   * @retval None
 374:Core/Src/main.cpp ****   */
 375:Core/Src/main.cpp **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 376:Core/Src/main.cpp **** {
 294              		.loc 1 376 1 view -0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 0
 297              		@ frame_needed = 0, uses_anonymous_args = 0
 298              		.loc 1 376 1 is_stmt 0 view .LVU76
 299 0000 08B5     		push	{r3, lr}
 300              		.save {r3, lr}
 301              	.LCFI4:
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 377:Core/Src/main.cpp ****   /* USER CODE BEGIN Callback 0 */
 378:Core/Src/main.cpp **** 
 379:Core/Src/main.cpp ****   /* USER CODE END Callback 0 */
 380:Core/Src/main.cpp ****   if (htim->Instance == TIM1) {
 305              		.loc 1 380 3 is_stmt 1 view .LVU77
 306              		.loc 1 380 13 is_stmt 0 view .LVU78
 307 0002 0268     		ldr	r2, [r0]
 308              		.loc 1 380 3 view .LVU79
ARM GAS  /tmp/ccbvQrOK.s 			page 13


 309 0004 034B     		ldr	r3, .L14
 310 0006 9A42     		cmp	r2, r3
 311 0008 00D0     		beq	.L13
 312              	.LVL13:
 313              	.L10:
 381:Core/Src/main.cpp ****     HAL_IncTick();
 382:Core/Src/main.cpp ****   }
 383:Core/Src/main.cpp ****   /* USER CODE BEGIN Callback 1 */
 384:Core/Src/main.cpp **** 
 385:Core/Src/main.cpp ****   /* USER CODE END Callback 1 */
 386:Core/Src/main.cpp **** }
 314              		.loc 1 386 1 view .LVU80
 315 000a 08BD     		pop	{r3, pc}
 316              	.LVL14:
 317              	.L13:
 381:Core/Src/main.cpp ****     HAL_IncTick();
 318              		.loc 1 381 5 is_stmt 1 view .LVU81
 381:Core/Src/main.cpp ****     HAL_IncTick();
 319              		.loc 1 381 16 is_stmt 0 view .LVU82
 320 000c FFF7FEFF 		bl	HAL_IncTick
 321              	.LVL15:
 322              		.loc 1 386 1 view .LVU83
 323 0010 FBE7     		b	.L10
 324              	.L15:
 325 0012 00BF     		.align	2
 326              	.L14:
 327 0014 00000140 		.word	1073807360
 328              		.cfi_endproc
 329              	.LFE1261:
 330              		.fnend
 332              		.section	.text.Error_Handler,"ax",%progbits
 333              		.align	1
 334              		.global	Error_Handler
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu fpv5-d16
 340              	Error_Handler:
 341              		.fnstart
 342              	.LFB1262:
 387:Core/Src/main.cpp **** 
 388:Core/Src/main.cpp **** /**
 389:Core/Src/main.cpp ****   * @brief  This function is executed in case of error occurrence.
 390:Core/Src/main.cpp ****   * @retval None
 391:Core/Src/main.cpp ****   */
 392:Core/Src/main.cpp **** void Error_Handler(void)
 393:Core/Src/main.cpp **** {
 343              		.loc 1 393 1 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ Volatile: function does not return.
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 394:Core/Src/main.cpp ****   /* USER CODE BEGIN Error_Handler_Debug */
 395:Core/Src/main.cpp ****   /* User can add his own implementation to report the HAL error return state */
 396:Core/Src/main.cpp ****   __disable_irq();
 349              		.loc 1 396 3 view .LVU85
ARM GAS  /tmp/ccbvQrOK.s 			page 14


 350              	.LBB9:
 351              	.LBI9:
 352              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccbvQrOK.s 			page 15


  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
ARM GAS  /tmp/ccbvQrOK.s 			page 16


 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccbvQrOK.s 			page 17


 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 353              		.loc 2 207 27 view .LVU86
 354              	.LBB10:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 355              		.loc 2 209 3 view .LVU87
 356              		.syntax unified
 357              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 358 0000 72B6     		cpsid i
 359              	@ 0 "" 2
 360              		.thumb
 361              		.syntax unified
 362              	.L17:
 363              	.LBE10:
 364              	.LBE9:
 397:Core/Src/main.cpp ****   while (1)
 365              		.loc 1 397 3 discriminator 1 view .LVU88
 366              		.loc 1 397 3 discriminator 1 view .LVU89
 367 0002 FEE7     		b	.L17
ARM GAS  /tmp/ccbvQrOK.s 			page 18


 368              		.cfi_endproc
 369              	.LFE1262:
 370              		.cantunwind
 371              		.fnend
 373              		.section	.text._ZL12MX_TIM2_Initv,"ax",%progbits
 374              		.align	1
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 378              		.fpu fpv5-d16
 380              	_ZL12MX_TIM2_Initv:
 381              		.fnstart
 382              	.LFB1258:
 242:Core/Src/main.cpp **** 
 383              		.loc 1 242 1 view -0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 56
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387 0000 00B5     		push	{lr}
 388              		.save {lr}
 389              	.LCFI5:
 390              		.cfi_def_cfa_offset 4
 391              		.cfi_offset 14, -4
 392              		.pad #60
 393 0002 8FB0     		sub	sp, sp, #60
 394              	.LCFI6:
 395              		.cfi_def_cfa_offset 64
 248:Core/Src/main.cpp ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 396              		.loc 1 248 3 view .LVU91
 248:Core/Src/main.cpp ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 397              		.loc 1 248 26 is_stmt 0 view .LVU92
 398 0004 0023     		movs	r3, #0
 399 0006 0A93     		str	r3, [sp, #40]
 400 0008 0B93     		str	r3, [sp, #44]
 401 000a 0C93     		str	r3, [sp, #48]
 402 000c 0D93     		str	r3, [sp, #52]
 249:Core/Src/main.cpp ****   TIM_OC_InitTypeDef sConfigOC = {0};
 403              		.loc 1 249 3 is_stmt 1 view .LVU93
 249:Core/Src/main.cpp ****   TIM_OC_InitTypeDef sConfigOC = {0};
 404              		.loc 1 249 27 is_stmt 0 view .LVU94
 405 000e 0793     		str	r3, [sp, #28]
 406 0010 0893     		str	r3, [sp, #32]
 407 0012 0993     		str	r3, [sp, #36]
 250:Core/Src/main.cpp **** 
 408              		.loc 1 250 3 is_stmt 1 view .LVU95
 250:Core/Src/main.cpp **** 
 409              		.loc 1 250 22 is_stmt 0 view .LVU96
 410 0014 0093     		str	r3, [sp]
 411 0016 0193     		str	r3, [sp, #4]
 412 0018 0293     		str	r3, [sp, #8]
 413 001a 0393     		str	r3, [sp, #12]
 414 001c 0493     		str	r3, [sp, #16]
 415 001e 0593     		str	r3, [sp, #20]
 416 0020 0693     		str	r3, [sp, #24]
 255:Core/Src/main.cpp ****   htim2.Init.Prescaler = 400;
 417              		.loc 1 255 3 is_stmt 1 view .LVU97
 255:Core/Src/main.cpp ****   htim2.Init.Prescaler = 400;
ARM GAS  /tmp/ccbvQrOK.s 			page 19


 418              		.loc 1 255 18 is_stmt 0 view .LVU98
 419 0022 2048     		ldr	r0, .L30
 420 0024 4FF08042 		mov	r2, #1073741824
 421 0028 0260     		str	r2, [r0]
 256:Core/Src/main.cpp ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 422              		.loc 1 256 3 is_stmt 1 view .LVU99
 256:Core/Src/main.cpp ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 423              		.loc 1 256 24 is_stmt 0 view .LVU100
 424 002a 4FF4C872 		mov	r2, #400
 425 002e 4260     		str	r2, [r0, #4]
 257:Core/Src/main.cpp ****   htim2.Init.Period = 1000;
 426              		.loc 1 257 3 is_stmt 1 view .LVU101
 257:Core/Src/main.cpp ****   htim2.Init.Period = 1000;
 427              		.loc 1 257 26 is_stmt 0 view .LVU102
 428 0030 8360     		str	r3, [r0, #8]
 258:Core/Src/main.cpp ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 429              		.loc 1 258 3 is_stmt 1 view .LVU103
 258:Core/Src/main.cpp ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 430              		.loc 1 258 21 is_stmt 0 view .LVU104
 431 0032 4FF47A72 		mov	r2, #1000
 432 0036 C260     		str	r2, [r0, #12]
 259:Core/Src/main.cpp ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 433              		.loc 1 259 3 is_stmt 1 view .LVU105
 259:Core/Src/main.cpp ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 434              		.loc 1 259 28 is_stmt 0 view .LVU106
 435 0038 0361     		str	r3, [r0, #16]
 260:Core/Src/main.cpp ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 436              		.loc 1 260 3 is_stmt 1 view .LVU107
 260:Core/Src/main.cpp ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 437              		.loc 1 260 32 is_stmt 0 view .LVU108
 438 003a 8023     		movs	r3, #128
 439 003c 8361     		str	r3, [r0, #24]
 261:Core/Src/main.cpp ****   {
 440              		.loc 1 261 3 is_stmt 1 view .LVU109
 261:Core/Src/main.cpp ****   {
 441              		.loc 1 261 24 is_stmt 0 view .LVU110
 442 003e FFF7FEFF 		bl	HAL_TIM_Base_Init
 443              	.LVL16:
 261:Core/Src/main.cpp ****   {
 444              		.loc 1 261 3 view .LVU111
 445 0042 20BB     		cbnz	r0, .L25
 265:Core/Src/main.cpp ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 446              		.loc 1 265 3 is_stmt 1 view .LVU112
 265:Core/Src/main.cpp ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 447              		.loc 1 265 34 is_stmt 0 view .LVU113
 448 0044 4FF48053 		mov	r3, #4096
 449 0048 0A93     		str	r3, [sp, #40]
 266:Core/Src/main.cpp ****   {
 450              		.loc 1 266 3 is_stmt 1 view .LVU114
 266:Core/Src/main.cpp ****   {
 451              		.loc 1 266 32 is_stmt 0 view .LVU115
 452 004a 0AA9     		add	r1, sp, #40
 453 004c 1548     		ldr	r0, .L30
 454 004e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 455              	.LVL17:
 266:Core/Src/main.cpp ****   {
 456              		.loc 1 266 3 view .LVU116
ARM GAS  /tmp/ccbvQrOK.s 			page 20


 457 0052 F0B9     		cbnz	r0, .L26
 270:Core/Src/main.cpp ****   {
 458              		.loc 1 270 3 is_stmt 1 view .LVU117
 270:Core/Src/main.cpp ****   {
 459              		.loc 1 270 22 is_stmt 0 view .LVU118
 460 0054 1348     		ldr	r0, .L30
 461 0056 FFF7FEFF 		bl	HAL_TIM_OC_Init
 462              	.LVL18:
 270:Core/Src/main.cpp ****   {
 463              		.loc 1 270 3 view .LVU119
 464 005a E0B9     		cbnz	r0, .L27
 274:Core/Src/main.cpp ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 465              		.loc 1 274 3 is_stmt 1 view .LVU120
 274:Core/Src/main.cpp ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 466              		.loc 1 274 37 is_stmt 0 view .LVU121
 467 005c 0023     		movs	r3, #0
 468 005e 0793     		str	r3, [sp, #28]
 275:Core/Src/main.cpp ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 469              		.loc 1 275 3 is_stmt 1 view .LVU122
 275:Core/Src/main.cpp ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 470              		.loc 1 275 33 is_stmt 0 view .LVU123
 471 0060 0993     		str	r3, [sp, #36]
 276:Core/Src/main.cpp ****   {
 472              		.loc 1 276 3 is_stmt 1 view .LVU124
 276:Core/Src/main.cpp ****   {
 473              		.loc 1 276 44 is_stmt 0 view .LVU125
 474 0062 07A9     		add	r1, sp, #28
 475 0064 0F48     		ldr	r0, .L30
 476 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 477              	.LVL19:
 276:Core/Src/main.cpp ****   {
 478              		.loc 1 276 3 view .LVU126
 479 006a B0B9     		cbnz	r0, .L28
 280:Core/Src/main.cpp ****   sConfigOC.Pulse = 0;
 480              		.loc 1 280 3 is_stmt 1 view .LVU127
 280:Core/Src/main.cpp ****   sConfigOC.Pulse = 0;
 481              		.loc 1 280 20 is_stmt 0 view .LVU128
 482 006c 3023     		movs	r3, #48
 483 006e 0093     		str	r3, [sp]
 281:Core/Src/main.cpp ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 484              		.loc 1 281 3 is_stmt 1 view .LVU129
 281:Core/Src/main.cpp ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 485              		.loc 1 281 19 is_stmt 0 view .LVU130
 486 0070 0022     		movs	r2, #0
 487 0072 0192     		str	r2, [sp, #4]
 282:Core/Src/main.cpp ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 488              		.loc 1 282 3 is_stmt 1 view .LVU131
 282:Core/Src/main.cpp ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 489              		.loc 1 282 24 is_stmt 0 view .LVU132
 490 0074 0292     		str	r2, [sp, #8]
 283:Core/Src/main.cpp ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 491              		.loc 1 283 3 is_stmt 1 view .LVU133
 283:Core/Src/main.cpp ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 492              		.loc 1 283 24 is_stmt 0 view .LVU134
 493 0076 0492     		str	r2, [sp, #16]
 284:Core/Src/main.cpp ****   {
 494              		.loc 1 284 3 is_stmt 1 view .LVU135
ARM GAS  /tmp/ccbvQrOK.s 			page 21


 284:Core/Src/main.cpp ****   {
 495              		.loc 1 284 31 is_stmt 0 view .LVU136
 496 0078 6946     		mov	r1, sp
 497 007a 0A48     		ldr	r0, .L30
 498 007c FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 499              	.LVL20:
 284:Core/Src/main.cpp ****   {
 500              		.loc 1 284 3 view .LVU137
 501 0080 68B9     		cbnz	r0, .L29
 291:Core/Src/main.cpp **** 
 502              		.loc 1 291 3 is_stmt 1 view .LVU138
 291:Core/Src/main.cpp **** 
 503              		.loc 1 291 22 is_stmt 0 view .LVU139
 504 0082 0848     		ldr	r0, .L30
 505 0084 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 506              	.LVL21:
 293:Core/Src/main.cpp **** 
 507              		.loc 1 293 1 view .LVU140
 508 0088 0FB0     		add	sp, sp, #60
 509              	.LCFI7:
 510              		.cfi_remember_state
 511              		.cfi_def_cfa_offset 4
 512              		@ sp needed
 513 008a 5DF804FB 		ldr	pc, [sp], #4
 514              	.L25:
 515              	.LCFI8:
 516              		.cfi_restore_state
 263:Core/Src/main.cpp ****   }
 517              		.loc 1 263 5 is_stmt 1 view .LVU141
 263:Core/Src/main.cpp ****   }
 518              		.loc 1 263 18 is_stmt 0 view .LVU142
 519 008e FFF7FEFF 		bl	Error_Handler
 520              	.LVL22:
 521              	.L26:
 268:Core/Src/main.cpp ****   }
 522              		.loc 1 268 5 is_stmt 1 view .LVU143
 268:Core/Src/main.cpp ****   }
 523              		.loc 1 268 18 is_stmt 0 view .LVU144
 524 0092 FFF7FEFF 		bl	Error_Handler
 525              	.LVL23:
 526              	.L27:
 272:Core/Src/main.cpp ****   }
 527              		.loc 1 272 5 is_stmt 1 view .LVU145
 272:Core/Src/main.cpp ****   }
 528              		.loc 1 272 18 is_stmt 0 view .LVU146
 529 0096 FFF7FEFF 		bl	Error_Handler
 530              	.LVL24:
 531              	.L28:
 278:Core/Src/main.cpp ****   }
 532              		.loc 1 278 5 is_stmt 1 view .LVU147
 278:Core/Src/main.cpp ****   }
 533              		.loc 1 278 18 is_stmt 0 view .LVU148
 534 009a FFF7FEFF 		bl	Error_Handler
 535              	.LVL25:
 536              	.L29:
 286:Core/Src/main.cpp ****   }
 537              		.loc 1 286 5 is_stmt 1 view .LVU149
ARM GAS  /tmp/ccbvQrOK.s 			page 22


 286:Core/Src/main.cpp ****   }
 538              		.loc 1 286 18 is_stmt 0 view .LVU150
 539 009e FFF7FEFF 		bl	Error_Handler
 540              	.LVL26:
 541              	.L31:
 542 00a2 00BF     		.align	2
 543              	.L30:
 544 00a4 00000000 		.word	.LANCHOR0
 545              		.cfi_endproc
 546              	.LFE1258:
 547              		.fnend
 549              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
 550              		.align	1
 551              		.global	_Z18SystemClock_Configv
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv5-d16
 557              	_Z18SystemClock_Configv:
 558              		.fnstart
 559              	.LFB1257:
 183:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 560              		.loc 1 183 1 is_stmt 1 view -0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 112
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564 0000 00B5     		push	{lr}
 565              		.save {lr}
 566              	.LCFI9:
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 14, -4
 569              		.pad #116
 570 0002 9DB0     		sub	sp, sp, #116
 571              	.LCFI10:
 572              		.cfi_def_cfa_offset 120
 184:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 573              		.loc 1 184 3 view .LVU152
 184:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 574              		.loc 1 184 22 is_stmt 0 view .LVU153
 575 0004 4C22     		movs	r2, #76
 576 0006 0021     		movs	r1, #0
 577 0008 09A8     		add	r0, sp, #36
 578 000a FFF7FEFF 		bl	memset
 579              	.LVL27:
 185:Core/Src/main.cpp **** 
 580              		.loc 1 185 3 is_stmt 1 view .LVU154
 185:Core/Src/main.cpp **** 
 581              		.loc 1 185 22 is_stmt 0 view .LVU155
 582 000e 2022     		movs	r2, #32
 583 0010 0021     		movs	r1, #0
 584 0012 01A8     		add	r0, sp, #4
 585 0014 FFF7FEFF 		bl	memset
 586              	.LVL28:
 189:Core/Src/main.cpp **** 
 587              		.loc 1 189 3 is_stmt 1 view .LVU156
 189:Core/Src/main.cpp **** 
 588              		.loc 1 189 25 is_stmt 0 view .LVU157
ARM GAS  /tmp/ccbvQrOK.s 			page 23


 589 0018 0220     		movs	r0, #2
 590 001a FFF7FEFF 		bl	HAL_PWREx_ConfigSupply
 591              	.LVL29:
 193:Core/Src/main.cpp **** 
 592              		.loc 1 193 3 is_stmt 1 view .LVU158
 593              	.LBB11:
 193:Core/Src/main.cpp **** 
 594              		.loc 1 193 3 view .LVU159
 595 001e 0023     		movs	r3, #0
 596 0020 0093     		str	r3, [sp]
 193:Core/Src/main.cpp **** 
 597              		.loc 1 193 3 view .LVU160
 598 0022 214B     		ldr	r3, .L39
 599 0024 9A69     		ldr	r2, [r3, #24]
 600 0026 42F44042 		orr	r2, r2, #49152
 601 002a 9A61     		str	r2, [r3, #24]
 193:Core/Src/main.cpp **** 
 602              		.loc 1 193 3 view .LVU161
 603 002c 9B69     		ldr	r3, [r3, #24]
 604 002e 03F44043 		and	r3, r3, #49152
 605 0032 0093     		str	r3, [sp]
 193:Core/Src/main.cpp **** 
 606              		.loc 1 193 3 view .LVU162
 607 0034 009B     		ldr	r3, [sp]
 608              	.L33:
 609              	.LBE11:
 195:Core/Src/main.cpp **** 
 610              		.loc 1 195 3 view .LVU163
 195:Core/Src/main.cpp **** 
 611              		.loc 1 195 9 view .LVU164
 195:Core/Src/main.cpp **** 
 612              		.loc 1 195 10 is_stmt 0 view .LVU165
 613 0036 1C4B     		ldr	r3, .L39
 614 0038 9B69     		ldr	r3, [r3, #24]
 195:Core/Src/main.cpp **** 
 615              		.loc 1 195 9 view .LVU166
 616 003a 13F4005F 		tst	r3, #8192
 617 003e FAD0     		beq	.L33
 200:Core/Src/main.cpp ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 618              		.loc 1 200 3 is_stmt 1 view .LVU167
 200:Core/Src/main.cpp ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 619              		.loc 1 200 36 is_stmt 0 view .LVU168
 620 0040 0123     		movs	r3, #1
 621 0042 0993     		str	r3, [sp, #36]
 201:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 622              		.loc 1 201 3 is_stmt 1 view .LVU169
 201:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 623              		.loc 1 201 30 is_stmt 0 view .LVU170
 624 0044 4FF48033 		mov	r3, #65536
 625 0048 0A93     		str	r3, [sp, #40]
 202:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 626              		.loc 1 202 3 is_stmt 1 view .LVU171
 202:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 627              		.loc 1 202 34 is_stmt 0 view .LVU172
 628 004a 0223     		movs	r3, #2
 629 004c 1293     		str	r3, [sp, #72]
 203:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
ARM GAS  /tmp/ccbvQrOK.s 			page 24


 630              		.loc 1 203 3 is_stmt 1 view .LVU173
 203:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
 631              		.loc 1 203 35 is_stmt 0 view .LVU174
 632 004e 1393     		str	r3, [sp, #76]
 204:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 256;
 633              		.loc 1 204 3 is_stmt 1 view .LVU175
 204:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 256;
 634              		.loc 1 204 30 is_stmt 0 view .LVU176
 635 0050 0822     		movs	r2, #8
 636 0052 1492     		str	r2, [sp, #80]
 205:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = 2;
 637              		.loc 1 205 3 is_stmt 1 view .LVU177
 205:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = 2;
 638              		.loc 1 205 30 is_stmt 0 view .LVU178
 639 0054 4FF48072 		mov	r2, #256
 640 0058 1592     		str	r2, [sp, #84]
 206:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 641              		.loc 1 206 3 is_stmt 1 view .LVU179
 206:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 642              		.loc 1 206 30 is_stmt 0 view .LVU180
 643 005a 1693     		str	r3, [sp, #88]
 207:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLR = 2;
 644              		.loc 1 207 3 is_stmt 1 view .LVU181
 207:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLR = 2;
 645              		.loc 1 207 30 is_stmt 0 view .LVU182
 646 005c 1793     		str	r3, [sp, #92]
 208:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 647              		.loc 1 208 3 is_stmt 1 view .LVU183
 208:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 648              		.loc 1 208 30 is_stmt 0 view .LVU184
 649 005e 1893     		str	r3, [sp, #96]
 209:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 650              		.loc 1 209 3 is_stmt 1 view .LVU185
 209:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 651              		.loc 1 209 32 is_stmt 0 view .LVU186
 652 0060 0423     		movs	r3, #4
 653 0062 1993     		str	r3, [sp, #100]
 210:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 654              		.loc 1 210 3 is_stmt 1 view .LVU187
 210:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLFRACN = 0;
 655              		.loc 1 210 35 is_stmt 0 view .LVU188
 656 0064 0023     		movs	r3, #0
 657 0066 1A93     		str	r3, [sp, #104]
 211:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 658              		.loc 1 211 3 is_stmt 1 view .LVU189
 211:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 659              		.loc 1 211 34 is_stmt 0 view .LVU190
 660 0068 1B93     		str	r3, [sp, #108]
 212:Core/Src/main.cpp ****   {
 661              		.loc 1 212 3 is_stmt 1 view .LVU191
 212:Core/Src/main.cpp ****   {
 662              		.loc 1 212 24 is_stmt 0 view .LVU192
 663 006a 09A8     		add	r0, sp, #36
 664 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 665              	.LVL30:
 212:Core/Src/main.cpp ****   {
 666              		.loc 1 212 3 view .LVU193
ARM GAS  /tmp/ccbvQrOK.s 			page 25


 667 0070 B0B9     		cbnz	r0, .L37
 219:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 668              		.loc 1 219 3 is_stmt 1 view .LVU194
 219:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
 669              		.loc 1 219 31 is_stmt 0 view .LVU195
 670 0072 3F23     		movs	r3, #63
 671 0074 0193     		str	r3, [sp, #4]
 222:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 672              		.loc 1 222 3 is_stmt 1 view .LVU196
 222:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 673              		.loc 1 222 34 is_stmt 0 view .LVU197
 674 0076 0323     		movs	r3, #3
 675 0078 0293     		str	r3, [sp, #8]
 223:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 676              		.loc 1 223 3 is_stmt 1 view .LVU198
 223:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 677              		.loc 1 223 35 is_stmt 0 view .LVU199
 678 007a 0023     		movs	r3, #0
 679 007c 0393     		str	r3, [sp, #12]
 224:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 680              		.loc 1 224 3 is_stmt 1 view .LVU200
 224:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 681              		.loc 1 224 35 is_stmt 0 view .LVU201
 682 007e 0823     		movs	r3, #8
 683 0080 0493     		str	r3, [sp, #16]
 225:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 684              		.loc 1 225 3 is_stmt 1 view .LVU202
 225:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 685              		.loc 1 225 36 is_stmt 0 view .LVU203
 686 0082 4023     		movs	r3, #64
 687 0084 0593     		str	r3, [sp, #20]
 226:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 688              		.loc 1 226 3 is_stmt 1 view .LVU204
 226:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 689              		.loc 1 226 36 is_stmt 0 view .LVU205
 690 0086 0693     		str	r3, [sp, #24]
 227:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 691              		.loc 1 227 3 is_stmt 1 view .LVU206
 227:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 692              		.loc 1 227 36 is_stmt 0 view .LVU207
 693 0088 4FF48062 		mov	r2, #1024
 694 008c 0792     		str	r2, [sp, #28]
 228:Core/Src/main.cpp **** 
 695              		.loc 1 228 3 is_stmt 1 view .LVU208
 228:Core/Src/main.cpp **** 
 696              		.loc 1 228 36 is_stmt 0 view .LVU209
 697 008e 0893     		str	r3, [sp, #32]
 230:Core/Src/main.cpp ****   {
 698              		.loc 1 230 3 is_stmt 1 view .LVU210
 230:Core/Src/main.cpp ****   {
 699              		.loc 1 230 26 is_stmt 0 view .LVU211
 700 0090 0221     		movs	r1, #2
 701 0092 01A8     		add	r0, sp, #4
 702 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 703              	.LVL31:
 230:Core/Src/main.cpp ****   {
 704              		.loc 1 230 3 view .LVU212
ARM GAS  /tmp/ccbvQrOK.s 			page 26


 705 0098 20B9     		cbnz	r0, .L38
 234:Core/Src/main.cpp **** 
 706              		.loc 1 234 1 view .LVU213
 707 009a 1DB0     		add	sp, sp, #116
 708              	.LCFI11:
 709              		.cfi_remember_state
 710              		.cfi_def_cfa_offset 4
 711              		@ sp needed
 712 009c 5DF804FB 		ldr	pc, [sp], #4
 713              	.L37:
 714              	.LCFI12:
 715              		.cfi_restore_state
 214:Core/Src/main.cpp ****   }
 716              		.loc 1 214 5 is_stmt 1 view .LVU214
 214:Core/Src/main.cpp ****   }
 717              		.loc 1 214 18 is_stmt 0 view .LVU215
 718 00a0 FFF7FEFF 		bl	Error_Handler
 719              	.LVL32:
 720              	.L38:
 232:Core/Src/main.cpp ****   }
 721              		.loc 1 232 5 is_stmt 1 view .LVU216
 232:Core/Src/main.cpp ****   }
 722              		.loc 1 232 18 is_stmt 0 view .LVU217
 723 00a4 FFF7FEFF 		bl	Error_Handler
 724              	.LVL33:
 725              	.L40:
 726              		.align	2
 727              	.L39:
 728 00a8 00480258 		.word	1476544512
 729              		.cfi_endproc
 730              	.LFE1257:
 731              		.fnend
 733              		.section	.text.main,"ax",%progbits
 734              		.align	1
 735              		.global	main
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv5-d16
 741              	main:
 742              		.fnstart
 743              	.LFB1256:
  95:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
 744              		.loc 1 95 1 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748 0000 38B5     		push	{r3, r4, r5, lr}
 749              		.save {r3, r4, r5, lr}
 750              	.LCFI13:
 751              		.cfi_def_cfa_offset 16
 752              		.cfi_offset 3, -16
 753              		.cfi_offset 4, -12
 754              		.cfi_offset 5, -8
 755              		.cfi_offset 14, -4
  99:Core/Src/main.cpp ****   STM32LED::LED2= new STM32LED::LED(GPIOE, GPIO_PIN_1);
 756              		.loc 1 99 3 view .LVU219
ARM GAS  /tmp/ccbvQrOK.s 			page 27


  99:Core/Src/main.cpp ****   STM32LED::LED2= new STM32LED::LED(GPIOE, GPIO_PIN_1);
 757              		.loc 1 99 54 is_stmt 0 view .LVU220
 758 0002 0C20     		movs	r0, #12
 759              	.LEHB0:
 760 0004 FFF7FEFF 		bl	_Znwj
 761              	.LVL34:
 762              	.LEHE0:
 763 0008 0446     		mov	r4, r0
 764 000a 0122     		movs	r2, #1
 765 000c 3049     		ldr	r1, .L52
 766              	.LEHB1:
 767 000e FFF7FEFF 		bl	_ZN8STM32LED3LEDC1EP12GPIO_TypeDeft
 768              	.LVL35:
 769              	.LEHE1:
  99:Core/Src/main.cpp ****   STM32LED::LED2= new STM32LED::LED(GPIOE, GPIO_PIN_1);
 770              		.loc 1 99 17 discriminator 2 view .LVU221
 771 0012 304B     		ldr	r3, .L52+4
 772 0014 1C60     		str	r4, [r3]
 100:Core/Src/main.cpp ****   STM32LED::LED3= new STM32LED::LED(GPIOB, GPIO_PIN_14);
 773              		.loc 1 100 3 is_stmt 1 discriminator 2 view .LVU222
 100:Core/Src/main.cpp ****   STM32LED::LED3= new STM32LED::LED(GPIOB, GPIO_PIN_14);
 774              		.loc 1 100 54 is_stmt 0 discriminator 2 view .LVU223
 775 0016 0C20     		movs	r0, #12
 776              	.LEHB2:
 777 0018 FFF7FEFF 		bl	_Znwj
 778              	.LVL36:
 779              	.LEHE2:
 780 001c 0446     		mov	r4, r0
 781 001e 0222     		movs	r2, #2
 782 0020 2D49     		ldr	r1, .L52+8
 783              	.LEHB3:
 784 0022 FFF7FEFF 		bl	_ZN8STM32LED3LEDC1EP12GPIO_TypeDeft
 785              	.LVL37:
 786              	.LEHE3:
 100:Core/Src/main.cpp ****   STM32LED::LED3= new STM32LED::LED(GPIOB, GPIO_PIN_14);
 787              		.loc 1 100 17 discriminator 2 view .LVU224
 788 0026 2D4B     		ldr	r3, .L52+12
 789 0028 1C60     		str	r4, [r3]
 101:Core/Src/main.cpp **** 
 790              		.loc 1 101 3 is_stmt 1 discriminator 2 view .LVU225
 101:Core/Src/main.cpp **** 
 791              		.loc 1 101 55 is_stmt 0 discriminator 2 view .LVU226
 792 002a 0C20     		movs	r0, #12
 793              	.LEHB4:
 794 002c FFF7FEFF 		bl	_Znwj
 795              	.LVL38:
 796              	.LEHE4:
 797 0030 0446     		mov	r4, r0
 798 0032 4FF48042 		mov	r2, #16384
 799 0036 2649     		ldr	r1, .L52
 800              	.LEHB5:
 801 0038 FFF7FEFF 		bl	_ZN8STM32LED3LEDC1EP12GPIO_TypeDeft
 802              	.LVL39:
 803              	.LEHE5:
 101:Core/Src/main.cpp **** 
 804              		.loc 1 101 17 discriminator 2 view .LVU227
 805 003c 284B     		ldr	r3, .L52+16
ARM GAS  /tmp/ccbvQrOK.s 			page 28


 806 003e 1C60     		str	r4, [r3]
 104:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> calculate_timer_frequency(100);
 807              		.loc 1 104 3 is_stmt 1 discriminator 2 view .LVU228
 104:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> calculate_timer_frequency(100);
 808              		.loc 1 104 97 is_stmt 0 discriminator 2 view .LVU229
 809 0040 1420     		movs	r0, #20
 810              	.LEHB6:
 811 0042 FFF7FEFF 		bl	_Znwj
 812              	.LVL40:
 813              	.LEHE6:
 814 0046 0446     		mov	r4, r0
 815 0048 264B     		ldr	r3, .L52+20
 816 004a 0122     		movs	r2, #1
 817 004c 2649     		ldr	r1, .L52+24
 818              	.LEHB7:
 819 004e FFF7FEFF 		bl	_ZN18STM32_motorControl12motorControlC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef
 820              	.LVL41:
 821              	.LEHE7:
 104:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> calculate_timer_frequency(100);
 822              		.loc 1 104 31 discriminator 2 view .LVU230
 823 0052 264D     		ldr	r5, .L52+28
 824 0054 2C60     		str	r4, [r5]
 105:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> adjust_timer_frequency(1000);
 825              		.loc 1 105 3 is_stmt 1 discriminator 2 view .LVU231
 105:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> adjust_timer_frequency(1000);
 826              		.loc 1 105 59 is_stmt 0 discriminator 2 view .LVU232
 827 0056 6421     		movs	r1, #100
 828 0058 2046     		mov	r0, r4
 829              	.LEHB8:
 830 005a FFF7FEFF 		bl	_ZN18STM32_motorControl12motorControl25calculate_timer_frequencyEt
 831              	.LVL42:
 106:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> timer_start();
 832              		.loc 1 106 3 is_stmt 1 discriminator 2 view .LVU233
 106:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> timer_start();
 833              		.loc 1 106 56 is_stmt 0 discriminator 2 view .LVU234
 834 005e 4FF47A71 		mov	r1, #1000
 835 0062 2868     		ldr	r0, [r5]
 836 0064 FFF7FEFF 		bl	_ZN18STM32_motorControl12motorControl22adjust_timer_frequencyEt
 837              	.LVL43:
 107:Core/Src/main.cpp ****   /* USER CODE END 1 */
 838              		.loc 1 107 3 is_stmt 1 discriminator 2 view .LVU235
 107:Core/Src/main.cpp ****   /* USER CODE END 1 */
 839              		.loc 1 107 45 is_stmt 0 discriminator 2 view .LVU236
 840 0068 2868     		ldr	r0, [r5]
 841 006a FFF7FEFF 		bl	_ZN18STM32_motorControl12motorControl11timer_startEv
 842              	.LVL44:
 113:Core/Src/main.cpp **** 
 843              		.loc 1 113 3 is_stmt 1 discriminator 2 view .LVU237
 113:Core/Src/main.cpp **** 
 844              		.loc 1 113 11 is_stmt 0 discriminator 2 view .LVU238
 845 006e FFF7FEFF 		bl	HAL_Init
 846              	.LVL45:
 120:Core/Src/main.cpp **** 
 847              		.loc 1 120 3 is_stmt 1 discriminator 2 view .LVU239
 120:Core/Src/main.cpp **** 
 848              		.loc 1 120 21 is_stmt 0 discriminator 2 view .LVU240
 849 0072 FFF7FEFF 		bl	_Z18SystemClock_Configv
ARM GAS  /tmp/ccbvQrOK.s 			page 29


 850              	.LVL46:
 127:Core/Src/main.cpp ****   MX_TIM2_Init();
 851              		.loc 1 127 3 is_stmt 1 discriminator 2 view .LVU241
 127:Core/Src/main.cpp ****   MX_TIM2_Init();
 852              		.loc 1 127 15 is_stmt 0 discriminator 2 view .LVU242
 853 0076 FFF7FEFF 		bl	_ZL12MX_GPIO_Initv
 854              	.LVL47:
 128:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 855              		.loc 1 128 3 is_stmt 1 discriminator 2 view .LVU243
 128:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 856              		.loc 1 128 15 is_stmt 0 discriminator 2 view .LVU244
 857 007a FFF7FEFF 		bl	_ZL12MX_TIM2_Initv
 858              	.LVL48:
 130:Core/Src/main.cpp ****   /* USER CODE END 2 */
 859              		.loc 1 130 3 is_stmt 1 discriminator 2 view .LVU245
 130:Core/Src/main.cpp ****   /* USER CODE END 2 */
 860              		.loc 1 130 19 is_stmt 0 discriminator 2 view .LVU246
 861 007e 0021     		movs	r1, #0
 862 0080 1848     		ldr	r0, .L52+20
 863 0082 FFF7FEFF 		bl	HAL_TIM_OC_Start
 864              	.LVL49:
 134:Core/Src/main.cpp **** 
 865              		.loc 1 134 3 is_stmt 1 discriminator 2 view .LVU247
 134:Core/Src/main.cpp **** 
 866              		.loc 1 134 21 is_stmt 0 discriminator 2 view .LVU248
 867 0086 FFF7FEFF 		bl	osKernelInitialize
 868              	.LVL50:
 154:Core/Src/main.cpp ****   // motorControlTaskHandle = osThreadNew(, NULL, &motorControlTask_attributes);
 869              		.loc 1 154 3 is_stmt 1 discriminator 2 view .LVU249
 154:Core/Src/main.cpp ****   // motorControlTaskHandle = osThreadNew(, NULL, &motorControlTask_attributes);
 870              		.loc 1 154 34 is_stmt 0 discriminator 2 view .LVU250
 871 008a 194A     		ldr	r2, .L52+32
 872 008c 0021     		movs	r1, #0
 873 008e 1948     		ldr	r0, .L52+36
 874 0090 FFF7FEFF 		bl	osThreadNew
 875              	.LVL51:
 154:Core/Src/main.cpp ****   // motorControlTaskHandle = osThreadNew(, NULL, &motorControlTask_attributes);
 876              		.loc 1 154 21 discriminator 2 view .LVU251
 877 0094 184B     		ldr	r3, .L52+40
 878 0096 1860     		str	r0, [r3]
 165:Core/Src/main.cpp ****   /* We should never get here as control is now taken by the scheduler */
 879              		.loc 1 165 3 is_stmt 1 discriminator 2 view .LVU252
 165:Core/Src/main.cpp ****   /* We should never get here as control is now taken by the scheduler */
 880              		.loc 1 165 16 is_stmt 0 discriminator 2 view .LVU253
 881 0098 FFF7FEFF 		bl	osKernelStart
 882              	.LVL52:
 883              	.L42:
 169:Core/Src/main.cpp ****   {
 884              		.loc 1 169 3 is_stmt 1 discriminator 1 view .LVU254
 169:Core/Src/main.cpp ****   {
 885              		.loc 1 169 3 discriminator 1 view .LVU255
 886 009c FEE7     		b	.L42
 887              	.L47:
  99:Core/Src/main.cpp ****   STM32LED::LED2= new STM32LED::LED(GPIOE, GPIO_PIN_1);
 888              		.loc 1 99 54 is_stmt 0 view .LVU256
 889 009e 0C21     		movs	r1, #12
 890 00a0 2046     		mov	r0, r4
ARM GAS  /tmp/ccbvQrOK.s 			page 30


 891 00a2 FFF7FEFF 		bl	_ZdlPvj
 892              	.LVL53:
 893 00a6 FFF7FEFF 		bl	__cxa_end_cleanup
 894              	.LVL54:
 895              	.L48:
 100:Core/Src/main.cpp ****   STM32LED::LED3= new STM32LED::LED(GPIOB, GPIO_PIN_14);
 896              		.loc 1 100 54 view .LVU257
 897 00aa 0C21     		movs	r1, #12
 898 00ac 2046     		mov	r0, r4
 899 00ae FFF7FEFF 		bl	_ZdlPvj
 900              	.LVL55:
 901 00b2 FFF7FEFF 		bl	__cxa_end_cleanup
 902              	.LVL56:
 903              	.L49:
 101:Core/Src/main.cpp **** 
 904              		.loc 1 101 55 view .LVU258
 905 00b6 0C21     		movs	r1, #12
 906 00b8 2046     		mov	r0, r4
 907 00ba FFF7FEFF 		bl	_ZdlPvj
 908              	.LVL57:
 909 00be FFF7FEFF 		bl	__cxa_end_cleanup
 910              	.LVL58:
 911              	.L50:
 104:Core/Src/main.cpp ****   STM32_motorControl::motorC1 -> calculate_timer_frequency(100);
 912              		.loc 1 104 97 view .LVU259
 913 00c2 1421     		movs	r1, #20
 914 00c4 2046     		mov	r0, r4
 915 00c6 FFF7FEFF 		bl	_ZdlPvj
 916              	.LVL59:
 917 00ca FFF7FEFF 		bl	__cxa_end_cleanup
 918              	.LVL60:
 919              	.LEHE8:
 920              	.L53:
 921 00ce 00BF     		.align	2
 922              	.L52:
 923 00d0 00040258 		.word	1476527104
 924 00d4 00000000 		.word	_ZN8STM32LED4LED1E
 925 00d8 00100258 		.word	1476530176
 926 00dc 00000000 		.word	_ZN8STM32LED4LED2E
 927 00e0 00000000 		.word	_ZN8STM32LED4LED3E
 928 00e4 00000000 		.word	.LANCHOR0
 929 00e8 00000258 		.word	1476526080
 930 00ec 00000000 		.word	_ZN18STM32_motorControl7motorC1E
 931 00f0 00000000 		.word	.LANCHOR1
 932 00f4 00000000 		.word	_Z16StartDefaultTaskPv
 933 00f8 00000000 		.word	.LANCHOR2
 934              		.cfi_endproc
 935              	.LFE1256:
 936              		.global	__gxx_personality_v0
 937              		.personality	__gxx_personality_v0
 938              		.handlerdata
 939              	.LLSDA1256:
 940 0008 FF       		.byte	0xff
 941 0009 FF       		.byte	0xff
 942 000a 01       		.byte	0x1
 943 000b 28       		.uleb128 .LLSDACSE1256-.LLSDACSB1256
 944              	.LLSDACSB1256:
ARM GAS  /tmp/ccbvQrOK.s 			page 31


 945 000c 04       		.uleb128 .LEHB0-.LFB1256
 946 000d 04       		.uleb128 .LEHE0-.LEHB0
 947 000e 00       		.uleb128 0
 948 000f 00       		.uleb128 0
 949 0010 0E       		.uleb128 .LEHB1-.LFB1256
 950 0011 04       		.uleb128 .LEHE1-.LEHB1
 951 0012 9E01     		.uleb128 .L47-.LFB1256
 952 0014 00       		.uleb128 0
 953 0015 18       		.uleb128 .LEHB2-.LFB1256
 954 0016 04       		.uleb128 .LEHE2-.LEHB2
 955 0017 00       		.uleb128 0
 956 0018 00       		.uleb128 0
 957 0019 22       		.uleb128 .LEHB3-.LFB1256
 958 001a 04       		.uleb128 .LEHE3-.LEHB3
 959 001b AA01     		.uleb128 .L48-.LFB1256
 960 001d 00       		.uleb128 0
 961 001e 2C       		.uleb128 .LEHB4-.LFB1256
 962 001f 04       		.uleb128 .LEHE4-.LEHB4
 963 0020 00       		.uleb128 0
 964 0021 00       		.uleb128 0
 965 0022 38       		.uleb128 .LEHB5-.LFB1256
 966 0023 04       		.uleb128 .LEHE5-.LEHB5
 967 0024 B601     		.uleb128 .L49-.LFB1256
 968 0026 00       		.uleb128 0
 969 0027 42       		.uleb128 .LEHB6-.LFB1256
 970 0028 04       		.uleb128 .LEHE6-.LEHB6
 971 0029 00       		.uleb128 0
 972 002a 00       		.uleb128 0
 973 002b 4E       		.uleb128 .LEHB7-.LFB1256
 974 002c 04       		.uleb128 .LEHE7-.LEHB7
 975 002d C201     		.uleb128 .L50-.LFB1256
 976 002f 00       		.uleb128 0
 977 0030 5A       		.uleb128 .LEHB8-.LFB1256
 978 0031 74       		.uleb128 .LEHE8-.LEHB8
 979 0032 00       		.uleb128 0
 980 0033 00       		.uleb128 0
 981              	.LLSDACSE1256:
 982              		.section	.text.main
 983              		.fnend
 985              		.global	motorControlTaskHandle
 986              		.section	.rodata.str1.4,"aMS",%progbits,1
 987              		.align	2
 988              	.LC0:
 989 0000 64656661 		.ascii	"defaultTask\000"
 989      756C7454 
 989      61736B00 
 990              		.global	defaultTaskHandle
 991              		.global	htim2
 992              		.section	.bss.defaultTaskHandle,"aw",%nobits
 993              		.align	2
 994              		.set	.LANCHOR2,. + 0
 997              	defaultTaskHandle:
 998 0000 00000000 		.space	4
 999              		.section	.bss.htim2,"aw",%nobits
 1000              		.align	2
 1001              		.set	.LANCHOR0,. + 0
 1004              	htim2:
ARM GAS  /tmp/ccbvQrOK.s 			page 32


 1005 0000 00000000 		.space	76
 1005      00000000 
 1005      00000000 
 1005      00000000 
 1005      00000000 
 1006              		.section	.bss.motorControlTaskHandle,"aw",%nobits
 1007              		.align	2
 1010              	motorControlTaskHandle:
 1011 0000 00000000 		.space	4
 1012              		.section	.rodata._ZL22defaultTask_attributes,"a"
 1013              		.align	2
 1014              		.set	.LANCHOR1,. + 0
 1017              	_ZL22defaultTask_attributes:
 1018 0000 00000000 		.word	.LC0
 1019 0004 00000000 		.space	16
 1019      00000000 
 1019      00000000 
 1019      00000000 
 1020 0014 00020000 		.word	512
 1021 0018 18000000 		.word	24
 1022 001c 00000000 		.space	8
 1022      00000000 
 1023              		.text
 1024              	.Letext0:
 1025              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1026              		.file 4 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h733xx.h"
 1027              		.file 5 "/usr/include/newlib/c++/10.3.1/cmath"
 1028              		.file 6 "/usr/include/newlib/c++/10.3.1/type_traits"
 1029              		.file 7 "/usr/include/newlib/c++/10.3.1/concepts"
 1030              		.file 8 "/usr/include/newlib/c++/10.3.1/arm-none-eabi/thumb/v7e-m+dp/hard/bits/c++config.h"
 1031              		.file 9 "/usr/include/newlib/c++/10.3.1/bits/iterator_concepts.h"
 1032              		.file 10 "/usr/include/newlib/c++/10.3.1/compare"
 1033              		.file 11 "/usr/include/newlib/c++/10.3.1/bits/exception_ptr.h"
 1034              		.file 12 "/usr/include/newlib/c++/10.3.1/debug/debug.h"
 1035              		.file 13 "/usr/include/newlib/c++/10.3.1/bits/std_abs.h"
 1036              		.file 14 "/usr/include/newlib/c++/10.3.1/bits/predefined_ops.h"
 1037              		.file 15 "/usr/include/newlib/math.h"
 1038              		.file 16 "/usr/include/newlib/c++/10.3.1/bits/ptr_traits.h"
 1039              		.file 17 "/usr/include/newlib/c++/10.3.1/math.h"
 1040              		.file 18 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 1041              		.file 19 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
 1042              		.file 20 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
 1043              		.file 21 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 1044              		.file 22 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
 1045              		.file 23 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 1046              		.file 24 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1047              		.file 25 "Modules/inc/LED.h"
 1048              		.file 26 "Modules/inc/motorControl.h"
 1049              		.file 27 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
 1050              		.file 28 "Core/Inc/main.h"
 1051              		.file 29 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
 1052              		.file 30 "/usr/include/newlib/c++/10.3.1/new"
 1053              		.file 31 "<built-in>"
ARM GAS  /tmp/ccbvQrOK.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/ccbvQrOK.s:17     .text._ZL12MX_GPIO_Initv:0000000000000000 $t
     /tmp/ccbvQrOK.s:24     .text._ZL12MX_GPIO_Initv:0000000000000000 _ZL12MX_GPIO_Initv
     /tmp/ccbvQrOK.s:188    .text._ZL12MX_GPIO_Initv:00000000000000d0 $d
.ARM.exidx.text._ZL12MX_GPIO_Initv:0000000000000000 $d
     /tmp/ccbvQrOK.s:196    .text._Z16StartDefaultTaskPv:0000000000000000 $t
     /tmp/ccbvQrOK.s:203    .text._Z16StartDefaultTaskPv:0000000000000000 _Z16StartDefaultTaskPv
     /tmp/ccbvQrOK.s:274    .text._Z16StartDefaultTaskPv:0000000000000044 $d
.ARM.exidx.text._Z16StartDefaultTaskPv:0000000000000000 $d
     /tmp/ccbvQrOK.s:283    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccbvQrOK.s:290    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccbvQrOK.s:327    .text.HAL_TIM_PeriodElapsedCallback:0000000000000014 $d
.ARM.extab.text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $d
.ARM.exidx.text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $d
     /tmp/ccbvQrOK.s:333    .text.Error_Handler:0000000000000000 $t
     /tmp/ccbvQrOK.s:340    .text.Error_Handler:0000000000000000 Error_Handler
    .ARM.exidx.text.Error_Handler:0000000000000000 $d
     /tmp/ccbvQrOK.s:374    .text._ZL12MX_TIM2_Initv:0000000000000000 $t
     /tmp/ccbvQrOK.s:380    .text._ZL12MX_TIM2_Initv:0000000000000000 _ZL12MX_TIM2_Initv
     /tmp/ccbvQrOK.s:544    .text._ZL12MX_TIM2_Initv:00000000000000a4 $d
.ARM.exidx.text._ZL12MX_TIM2_Initv:0000000000000000 $d
     /tmp/ccbvQrOK.s:550    .text._Z18SystemClock_Configv:0000000000000000 $t
     /tmp/ccbvQrOK.s:557    .text._Z18SystemClock_Configv:0000000000000000 _Z18SystemClock_Configv
     /tmp/ccbvQrOK.s:728    .text._Z18SystemClock_Configv:00000000000000a8 $d
.ARM.exidx.text._Z18SystemClock_Configv:0000000000000000 $d
     /tmp/ccbvQrOK.s:734    .text.main:0000000000000000 $t
     /tmp/ccbvQrOK.s:741    .text.main:0000000000000000 main
     /tmp/ccbvQrOK.s:923    .text.main:00000000000000d0 $d
             .ARM.extab.text.main:0000000000000000 $d
             .ARM.exidx.text.main:0000000000000000 $d
     /tmp/ccbvQrOK.s:1010   .bss.motorControlTaskHandle:0000000000000000 motorControlTaskHandle
     /tmp/ccbvQrOK.s:987    .rodata.str1.4:0000000000000000 $d
     /tmp/ccbvQrOK.s:997    .bss.defaultTaskHandle:0000000000000000 defaultTaskHandle
     /tmp/ccbvQrOK.s:1004   .bss.htim2:0000000000000000 htim2
     /tmp/ccbvQrOK.s:993    .bss.defaultTaskHandle:0000000000000000 $d
     /tmp/ccbvQrOK.s:1000   .bss.htim2:0000000000000000 $d
     /tmp/ccbvQrOK.s:1007   .bss.motorControlTaskHandle:0000000000000000 $d
     /tmp/ccbvQrOK.s:1013   .rodata._ZL22defaultTask_attributes:0000000000000000 $d
     /tmp/ccbvQrOK.s:1017   .rodata._ZL22defaultTask_attributes:0000000000000000 _ZL22defaultTask_attributes

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_unwind_cpp_pr0
_ZN8STM32LED3LED6toggleEv
osDelay
_ZN8STM32LED4LED1E
_ZN8STM32LED4LED2E
_ZN8STM32LED4LED3E
HAL_IncTick
__aeabi_unwind_cpp_pr1
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
ARM GAS  /tmp/ccbvQrOK.s 			page 34


HAL_TIM_MspPostInit
memset
HAL_PWREx_ConfigSupply
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
_Znwj
_ZN8STM32LED3LEDC1EP12GPIO_TypeDeft
_ZN18STM32_motorControl12motorControlC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef
_ZN18STM32_motorControl12motorControl25calculate_timer_frequencyEt
_ZN18STM32_motorControl12motorControl22adjust_timer_frequencyEt
_ZN18STM32_motorControl12motorControl11timer_startEv
HAL_Init
HAL_TIM_OC_Start
osKernelInitialize
osThreadNew
osKernelStart
_ZdlPvj
__cxa_end_cleanup
_ZN18STM32_motorControl7motorC1E
__gxx_personality_v0
